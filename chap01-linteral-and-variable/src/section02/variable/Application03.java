package section02.variable;

public class Application03 {
    public static void main(String[] args){
        /*
        변수의 명명 규칙
        변수의 이름을 지을 때 아무렇게나 짓는 것이 아닌 정해진 규칙이 있다
        실무적으로 굉장히 중요하기 때문에 반드시 숙지를 해야한다.
        또한 규칙에 맞는 올바른 변수명을 짓는 것이 좋은 프로그래밍을 하는 첫 단추이다.
         */

        /*
        변수의 명명 규칙
        1.컴파일 에러를 발생시키는 규칙
            1-1 동일한 범위 내에서는 동일한 변수명을 가질 수 없다.
            1-2. 예약이는 사용이 불가능하다(예약이란 프로그램에서 미리 사용하겠다고 complier와 약속한 키워드를 예약이라고 한다.)
            1-3. 변수명은 대/소문자를 구분한다. (자바는 대/소문자를 엄격하게 구분하는 언어이다.)
            1-4. 변수명은 숫자로 시작할 수 없다. (시작하는 것만 불가능하고 숫자를 섞어서 사용하는 것은 가능하다.)
            1-5. 특수 기호는 '_'와 '$'만 사용가능하다.
        2. 컴파일 에러를 발생시키지 않지만 개발자들끼리 암묵적인 규칙
            2-1. 변수명의 길이 제한은 없다. (하지만 적당히 해야한다.)
            2-2. 변수명이 합성어로 이루어진 경우 첫 단어는 소문자, 두 번째 단어의 시작은 대문자로 한다.(canel-case)
            2-3. 단어와 단어 사이의 연결은 언더스코어로(_)하지 않는다. (타 언어 네이밍 규칙이다.) snake-case
            2-4. 한글로 변수명을 짓는 것이 가능하지만 권장하지는 않는다. (한글을 취급하는 다양한 방식들이 존재하기 때문에 영어로 작성하는 것이 좋다.)
            2-5. 변수 안에 저장된 값이 어떤 의미를 가지는지 명확하게 표현하도록 한다.
            2-6. 전형적인 변수 이름이 있다면 가급적 사용하도록 한다.
            2-7. 명사형으로 작성 할 수 있도록 한다.
            2-8. boolean 형은 의문문으로 가급적 긍정형태로 네이밍 한다.
         */

        // 동일한 범위 내에서 동일한 변수명을 가질 수 없다
        int age = 20;
        //int age = 10;

        //목차 1-2 예약이는 사용이 불가능하다.
        //int_true = 10;
        //int_for - 20;

        //1-3 변수명은 대소문자를 구분한다
        int Agd = 20;
        int True = 30; //대문자라서 불리언으로 안되고 문자열로 됨

        //1-4 변수명은 숫자로 시작할 수 없다
        //int_1test = 10;
        //int_test1 = 10; 처음만 아니면됨

        //1-5. 특수 기호는 '_'와 '$'만 사용이 가능하다.
        int _age = 10;
        int $test = 20;
        //int *test = 10;
        //int t*est = 10; 그 외의 특수기호는 어디든 안됨

        // 에러를 발생시키지는 않지만 개발자끼리의 암묵적인 규칙
        int qwerqwerqwerqwerqwerqwerqwerqwer;

        // 2-2 변수명이 합성어로 이루어진 경우 첫 단어는 소문자, 두 번째 시작 단어는 대문자로 시작한다.
        //자바에서는 클래스명만 유일하게 대문자로 시작한다.
        int MaxAge = 10; // 이렇게 표현을 해도 무방하나 사용하지 않는다.
        int maxAge = 10; // 올바른 표현

        // 2-3 단어와 단어 사이의 연결은 언더스코어(_)를 사용하지 않는다.
        String user_name; //스네이크 케이스 : 단어와 단어사이를 _로 이어지게하는것
        String userName; // 카멜 케이스 : 단어와 단어사이를 대문자로 주는것

        // 2-4 한글로 변수명을 짓는 것은 가능하지만 권장하지 않는다.
        int 나이;

        // 2-5 변수 안에 저장된 값이 어떤 의미를 가지는지 명확하게 표현하도록 한다.
        String s;
        String name;

        // 2-6 전형적인 변수 이름이 있다면 가급적으로 사용한다.
        int sum = 0;
        int max = 10;
        int min = 0;
        int count = 0;
        int cnt = 0;

        // 2-7 명사형으로 작성할 수 있도록 한다.
        String goHome; // 가능하지만 명사형으로 짓는다.
        String home;

        // 2-8 boolean 형은 의문문으로 가급적으로 긍정의 형태를 갖는다.
        boolean isAlive = true;
        boolean isDead = false; //부정형보단 긍정형을 권장한다.

        int salary1 = 100;
        int salary2 = 120;
        int salary3 = 130;
        int salary4 = 150;
        int bonus1 = (int)(salary1 * 0.5);
        int bonus2 = (int)(salary2 * 0.5);
        int bonus3 = (int)(salary3 * 0.5);
        int bonus4 = (int)(salary4 * 0.5);

        System.out.println("김대리 님의 월급은 " + (salary1) + "만원 + 보너스" + (bonus1) +  "만원으로 총"
        + (salary1+bonus1) + "만원 입금되었습니다.");
        System.out.println("김과장 님의 월급은 " + (salary2) + "만원 + 보너스" + (bonus2) +  "만원으로 총"
                + (salary2+bonus2) + "만원 입금되었습니다.");
        System.out.println("김부장 님의 월급은 " + (salary3) + "만원 + 보너스" + (bonus3) +  "만원으로 총"
                + (salary3+bonus3) + "만원 입금되었습니다.");
        System.out.println("김차장 님의 월급은 " + (salary4) + "만원 + 보너스" + (bonus4) +  "만원으로 총"
                + (salary4+bonus4) + "만원 입금되었습니다.");
    }


}
